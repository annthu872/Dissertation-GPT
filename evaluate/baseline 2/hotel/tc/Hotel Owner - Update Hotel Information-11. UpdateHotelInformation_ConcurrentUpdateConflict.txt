Test Case: Test Case 1
testCaseName: Update Hotel Information - Happy Path
objective: Verify that the Hotel Owner can successfully update hotel information and is redirected to the dashboard with a success message.
testSteps:
  - Step 1: Log in as a Hotel Owner.
  - Step 2: Navigate to the Hotel Information page.
  - Step 3: Press the edit hotel information button.
  - Step 4: Update the desired fields with valid data.
  - Step 5: Press the submit button to update the information.
  - Step 6: Observe the system behavior.
expectedResult: The system should validate the fields, update the hotel information in the database, display a success message, and redirect the user to the dashboard.

Test Case: Test Case 2
testCaseName: Update Hotel Information - Validation Error
objective: Verify that the system shows an error message when the Hotel Owner tries to update hotel information with invalid data.
testSteps:
  - Step 1: Log in as a Hotel Owner.
  - Step 2: Navigate to the Hotel Information page.
  - Step 3: Press the edit hotel information button.
  - Step 4: Update the desired fields with invalid data.
  - Step 5: Press the submit button to update the information.
  - Step 6: Observe the system behavior.
expectedResult: The system should validate the fields and show an error message without updating the hotel information in the database.

Test Case: Test Case 3
testCaseName: Update Hotel Information - Concurrent Update Conflict
objective: Verify that the system handles conflicts gracefully when two Hotel Owners try to update the same hotel information at the same time.
testSteps:
  - Step 1: Log in as Hotel Owner A in Browser A.
  - Step 2: Log in as Hotel Owner B in Browser B.
  - Step 3: Both users navigate to the Hotel Information page at the same time.
  - Step 4: Both users press the edit hotel information button at the same time.
  - Step 5: Both users update different fields with valid data and submit at the same time.
  - Step 6: Observe the system behavior.
expectedResult: The system should handle the concurrent update attempt by either queuing the updates and processing them one after the other, or by showing a message to one of the users that another update is in progress, ensuring data integrity is maintained.

