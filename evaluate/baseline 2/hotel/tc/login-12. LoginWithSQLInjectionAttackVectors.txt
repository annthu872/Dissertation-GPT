Test Case: Test Case 1
testCaseName: Login with SQL Injection in Username Field
objective: Verify that the system is secure against SQL injection attacks through the username field during login
testSteps:
  - Step 1: Navigate to the login page.
  - Step 2: In the username field, enter an SQL injection code snippet (e.g., ' OR '1'='1).
  - Step 3: In the password field, enter any random text.
  - Step 4: Click the submit button.
expectedResult: The system should not authenticate the user and should display an error message indicating invalid credentials or a similar message that does not reveal system vulnerability.

Test Case: Test Case 2
testCaseName: Login with SQL Injection in Password Field
objective: Verify that the system is secure against SQL injection attacks through the password field during login
testSteps:
  - Step 1: Navigate to the login page.
  - Step 2: In the username field, enter a valid username.
  - Step 3: In the password field, enter an SQL injection code snippet (e.g., ' OR '1'='1).
  - Step 4: Click the submit button.
expectedResult: The system should not authenticate the user and should display an error message indicating invalid credentials or a similar message that does not reveal system vulnerability.

Test Case: Test Case 3
testCaseName: Login with SQL Injection in Both Fields
objective: Verify that the system is secure against combined SQL injection attacks through both the username and password fields during login
testSteps:
  - Step 1: Navigate to the login page.
  - Step 2: In the username field, enter an SQL injection code snippet (e.g., ' OR '1'='1).
  - Step 3: In the password field, enter another SQL injection code snippet (e.g., ' OR '1'='1).
  - Step 4: Click the submit button.
expectedResult: The system should not authenticate the user and should display an error message indicating invalid credentials or a similar message that does not reveal system vulnerability.

Test Case: Test Case 4
testCaseName: Login with Overly Long SQL Injection Payload
objective: Verify that the system is secure against SQL injection attacks with overly long payloads that could potentially overflow buffers
testSteps:
  - Step 1: Navigate to the login page.
  - Step 2: In the username field, enter a very long SQL injection code snippet (e.g., a 2000 character string that includes SQL commands).
  - Step 3: In the password field, enter any random text.
  - Step 4: Click the submit button.
expectedResult: The system should handle the input gracefully without crashing or showing any signs of a buffer overflow, and it should display an error message indicating invalid credentials or a similar message that does not reveal system vulnerability.

