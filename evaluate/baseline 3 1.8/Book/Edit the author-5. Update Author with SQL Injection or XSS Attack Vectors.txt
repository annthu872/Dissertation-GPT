Test Case: Test Case 1
testCaseName: Update Author with SQL Injection Attack
objective: Verify that the application is secure against SQL Injection attacks during the author update process
testSteps:
  - Step 1: Navigate to the author list/details page.
  - Step 2: Click the 'Update' button next to the author you wish to update.
  - Step 3: In the 'Name' or 'Bio' field, enter an SQL injection code snippet (e.g., 'Robert'); DROP TABLE Authors;--).
  - Step 4: Press the 'Submit' button.
expectedResult: The application should display an error message indicating that the input is invalid, or it should sanitize the input and update the author's information without executing the SQL code. No database alteration should occur due to the injection attempt.
explanation: This test case is created to ensure the application's security mechanisms are effective against SQL Injection attacks, which could potentially allow attackers to manipulate or destroy database content. It directly relates to the test scenario's focus on updating author information with SQL Injection or XSS Attack Vectors.

Test Case: Test Case 2
testCaseName: Update Author with XSS Attack
objective: Verify that the application is secure against XSS attacks during the author update process
testSteps:
  - Step 1: Navigate to the author list/details page.
  - Step 2: Click the 'Update' button next to the author you wish to update.
  - Step 3: In the 'Name' or 'Bio' field, enter a script tag with JavaScript code (e.g., <script>alert('XSS');</script>).
  - Step 4: Press the 'Submit' button.
expectedResult: The application should either display an error message indicating that the input is invalid, sanitize the input by removing the script tags before updating the author's information, or escape the input so that the script is not executed. The application should not execute the malicious script.
explanation: This test case is designed to check the application's defenses against Cross-Site Scripting (XSS) attacks when updating an author's information. It aims to ensure that the application properly handles potentially malicious input to prevent attackers from executing scripts in the context of the application. It is directly related to the test scenario's focus on updating author information with SQL Injection or XSS Attack Vectors.

