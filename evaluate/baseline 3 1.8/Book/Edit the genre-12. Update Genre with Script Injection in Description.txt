Test Case: Test Case 1
testCaseName: Update Genre with Valid Data and Script Injection in Description
objective: Verify that the system sanitizes input to prevent script injection when updating a genre's description
testSteps:
  - Step 1: Navigate to the genre list/details page.
  - Step 2: Click the 'Update' button next to the genre you wish to update.
  - Step 3: In the form displayed, enter a valid genre name in the 'Name' field.
  - Step 4: In the 'Description' field, enter a script injection payload (e.g., '<script>alert("Test")</script>').
  - Step 5: Press the 'Submit' button.
expectedResult: The genre is updated in the database without executing the script, and the list of genres with the updated record is displayed. The script injection attempt should be sanitized, and no script should be executed.
explanation: This test case is created to ensure that the application properly sanitizes user input to prevent Cross-Site Scripting (XSS) attacks when updating a genre. It directly matches the scenario name by testing the update functionality with a script injection in the description.

Test Case: Test Case 2
testCaseName: Update Genre with Script Injection in Description and Invalid Name
objective: Verify that the system displays incorrect data messages for invalid name while also sanitizing script injection attempts in the description
testSteps:
  - Step 1: Navigate to the genre list/details page.
  - Step 2: Click the 'Update' button next to the genre you wish to update.
  - Step 3: In the form displayed, enter an invalid genre name (e.g., using special characters or numbers).
  - Step 4: In the 'Description' field, enter a script injection payload (e.g., '<script>alert("Test")</script>').
  - Step 5: Press the 'Submit' button.
expectedResult: The system displays messages indicating the name is entered incorrectly. The script injection attempt in the description should be sanitized, ensuring no script is executed.
explanation: This test case checks the application's ability to handle invalid data (specifically, an invalid name) while also ensuring it sanitizes input to prevent script injection. It is relevant to the scenario as it tests the update functionality with a focus on input validation and security.

Test Case: Test Case 3
testCaseName: Cancel Update Genre Operation with Script Injection in Description
objective: Verify that cancelling the update operation does not save script injection attempts in the description
testSteps:
  - Step 1: Navigate to the genre list/details page.
  - Step 2: Click the 'Update' button next to the genre you wish to update.
  - Step 3: In the form displayed, enter any valid genre name in the 'Name' field.
  - Step 4: In the 'Description' field, enter a script injection payload (e.g., '<script>alert("Test")</script>').
  - Step 5: Press the 'Cancel' button.
expectedResult: The update operation is cancelled, and the genre record remains unchanged in the database. The list of genre records is displayed, and no script injection is saved or executed.
explanation: This test case ensures that cancelling an update operation with a script injection attempt in the description does not affect the database or execute the script. It is relevant to the scenario by testing the cancel functionality in the context of input sanitization and security.

