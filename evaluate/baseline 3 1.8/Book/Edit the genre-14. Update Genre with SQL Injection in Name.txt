Test Case: Test Case 1
testCaseName: Update Genre with Valid Data
objective: Verify that the genre can be updated with valid data without SQL Injection
testSteps:
  - Step 1: Navigate to the genre list/details page.
  - Step 2: Click the 'Update' button next to the genre you wish to update.
  - Step 3: On the displayed form, enter valid genre data in the 'Name' and 'Description' fields.
  - Step 4: Press the 'Submit' button.
expectedResult: The genre should be updated in the database, and the list of genres with the updated record should be displayed.
explanation: This test case ensures that the system properly updates a genre when provided with valid data, following the main scenario without attempting SQL Injection.

Test Case: Test Case 2
testCaseName: Update Genre with SQL Injection in Name
objective: Verify that the system prevents SQL Injection in the 'Name' field during genre update
testSteps:
  - Step 1: Navigate to the genre list/details page.
  - Step 2: Click the 'Update' button next to the genre you wish to update.
  - Step 3: In the 'Name' field, enter an SQL Injection code snippet (e.g., '1=1; DROP TABLE genres;--').
  - Step 4: Fill the 'Description' field with valid data.
  - Step 5: Press the 'Submit' button.
expectedResult: The system should display an error message or ignore the SQL code, preventing any database manipulation. The genre should not be updated with the SQL Injection code.
explanation: This test case directly addresses the test scenario's concern about SQL Injection in the 'Name' field during the update process. It verifies the system's ability to handle malicious input.

Test Case: Test Case 3
testCaseName: Cancel Update Genre Operation
objective: Verify that the genre update operation can be canceled without making changes to the database
testSteps:
  - Step 1: Navigate to the genre list/details page.
  - Step 2: Click the 'Update' button next to the genre you wish to update.
  - Step 3: Start entering data into the form fields.
  - Step 4: Press the 'Cancel' button before pressing 'Submit'.
expectedResult: The data should not be updated in the database, and the list of genre records should be displayed to the user.
explanation: This test case ensures that users can cancel the update operation at any point before submission, following the cancel operation scenario.

