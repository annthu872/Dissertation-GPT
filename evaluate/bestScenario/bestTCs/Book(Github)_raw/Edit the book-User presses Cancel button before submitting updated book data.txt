Test Case: Test Case 1
testCaseName: Cancel Update Operation Before Submission
objective: Verify that pressing the 'Cancel' button before submitting updated book data cancels the update operation and returns to the book list without making changes.
testSteps:
  - Step 1: Navigate to the book list/details page.
  - Step 2: Click the 'Update' button next to the book you wish to update.
  - Step 3: On the displayed form, start entering new data for the book (Title, Author, Genre, Description, Publication Date).
  - Step 4: Before pressing the 'Submit' button, click the 'Cancel' button.
expectedResult: The application should not update the book data in the database and should redirect the user to the list of book records, showing the original data before the attempted update.
explanation: This test case ensures that the cancel operation works as intended, allowing users to abort the update process if they decide not to proceed with their changes. It directly tests the user's ability to cancel the update operation before submission, which is a critical feature for preventing unintended changes.

Test Case: Test Case 2
testCaseName: Verify Navigation After Canceling Update
objective: Verify that after pressing the 'Cancel' button during an update operation, the user can navigate to other sections without updating the book data.
testSteps:
  - Step 1: Navigate to the book list/details page and click the 'Update' button next to a book.
  - Step 2: Begin entering or modifying the book's details in the form.
  - Step 3: Press the 'Cancel' button before submitting the updated data.
  - Step 4: After being redirected to the list of books, select a menu item such as 'Books', 'Genres', 'Authors', 'Home', or 'API'.
expectedResult: The application should not save any changes made during the update attempt and should allow the user to navigate to the selected section without issues, displaying the corresponding content without applying the canceled update.
explanation: This test case checks the functionality of the cancel operation in the context of user navigation post-operation. It ensures that canceling an update does not inadvertently save changes and that the application behaves as expected by allowing seamless navigation to other sections immediately after canceling.

